#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<locale.h>
#include<conio.h>
#include"SerialClass.h"

#define N 30
#define MAX_BUFFER 100
#define PAUSA_MS 200
#define MAXJUGADORES 50

typedef struct {
	char nombre[N];
	char apellido[N];
	int edad;
}jugador;

struct persona
{
	int id;
	char nombre[20];
	char apellidos[20];
	int años;
};

Serial* Arduino;

char lectura[10] = "\0";
char puerto[] = "COM4";
int opciongeneral;


void imprime_listado_jugadores();
void imprime_listado_partidos();
void imprime_ranking();
void recalcula_orden_ranking();
int comprobar_mensajes(Serial* Arduino); //devuelve 0 si no hay goles && 1 si gol portería A && 2 si gol en portería B
void bloquea_ultrasonidos(Serial* Arduino);
void activa_ultrasonidos(Serial* Arduino);
void jugar_partida();

void CargarJugador(jugador* jugadores, int n_jugador);
void RellenarEstructura(jugador* j);
void EscribirFichero(jugador* jugador, int n_jugadores);
void LeerFichero(jugador* jugador, int n_jugadores);


//Funcion que devuelve porterial que tenga gol
//Si devuelve 0 no hay gol
int detecta_gol(char cadena_arduino[]);

int main(void) {

	setlocale(LC_ALL, "es-ES");
	Arduino = new Serial((char*)puerto);

	activa_ultrasonidos(Arduino);
	Sleep(1000);

	//Menu Principal
	do
	{
		printf(" ------------------------------\n");
		printf("1. MENU OPCIONES\n");
		printf(" ------------------------------\n");
		printf("1. IMPRIME LISTADO JUGADORES\n");
		printf("2. JUGADORES (EDICION/ALTA/BAJA)\n");
		printf("3. IMPRIME HISTORICO DE PARTIDOS\n");
		printf("4. IMPRIME RANKING JUGADORES\n");
		printf("5. JUGAR\n");
		printf("6. SALIR\n");
		printf("\nIntroduzca la opción deseada: \n");
		scanf_s("%d", &opciongeneral);

		switch (opciongeneral) {
		case 1: // IMPRIME LISTADO JUGADORES
		{
			imprime_listado_jugadores();
			break;
		}

		case 2: // JUGADORES (EDICION/ALTA/BAJA)
		{
			imprime_listado_jugadores();
			break;
		}
		case 3: // IMPRIME HISTORICO DE PARTIDOS
		{
			imprime_listado_partidos();
			break;
		}
		case 4: // IMPRIME RANKING JUGADORES
		{
			imprime_ranking();
			break;
		}
		case 5: // JUGAR
		{
			printf("\nJUGAR.......\n");
			jugar_partida();
			break;
		}
		case 6: // SALIR
		{
			printf("\nSALIENDO.......\n");
			return(0);
		}
		default: // OPCION INTRODUCIDA INCORRECTA
		{
			printf("Opción incorrecta.\n");
			break;
		}
		}

	} while (1);

}
// ------------------------------------FUNCIONES ------------------------------------

void imprime_listado_jugadores() 
{
	FILE* pf_jugador;
	char display;
	struct persona* jugadores;
	errno_t e;

	// Memory allocation for maxjugadores structures
	jugadores = (struct persona*)malloc(50 * sizeof(struct persona));

	printf("\nLISTADO JUGADORES\n");
	printf("NOMBRE APELLIDOS EDAD\n");
	printf("#####################\n");

	e=fopen_s(&pf_jugador, "Jugadores.txt", "r");
	if (pf_jugador == NULL) 
	{
		printf("Error al abrir el fichero");
	}
	while (1) {
		// reading file
		display = fgetc(pf_jugador);
		// end of file indicator
		if (feof(pf_jugador))
			break;
		// displaying every characters
		if (display == ',')
		{
			display = ' ';
		}
		printf("%c", display);
	}
	printf("\n-------------------------------\n");
	fclose(pf_jugador);
}

void imprime_listado_partidos()
{
	FILE* pf_partidos;
	int i;
	char nombre[N];
	char apellido[N];
	char display;

	errno_t e;

	printf("\nPRINTING HISTORICO DE PARTIDOS \n");
	printf("JUGADOR1 Goles1 JUGADOR2 Goles2\n");
	printf("###############################\n");
	e=fopen_s(&pf_partidos,"partidos.txt", "r");
	if (pf_partidos == NULL) 
	{
		printf("Error al abrir el fichero");
	}
	while (1) 
	{
		// reading file
		display = fgetc(pf_partidos);
		// end of file indicator
		if (feof(pf_partidos))
			break;

		// displaying every characters
		if (display == ',')
		{
			display = ' ';
		}
		printf("%c", display);
	}

	printf("\n-------------------------------\n");
	fclose(pf_partidos);
	return;
}


void imprime_ranking()
{
	FILE* pf_partidos;
	int i;
	char nombre[N];
	char apellido[N];
	char display;
	
	errno_t e;

	printf("\n PRINTING RANKING \n");
	printf("ID NOMBRE APELLIDOS BALANCE\n");
	printf("########################\n");
	e= fopen_s(&pf_partidos,"ranking.txt", "r");
	if (pf_partidos == NULL) {
		printf("Error al abrir el fichero");
	}
	while (1) {
		// reading file
		display = fgetc(pf_partidos);
		// end of file indicator
		if (feof(pf_partidos))
			break;

		// displaying every characters
		if (display == ',')
		{
			display = ' ';
		}
		printf("%c", display);
	}
	printf("\n-------------------------------\n");
	fclose(pf_partidos);
	return;
}

void recalcula_orden_ranking()
{
}

int comprobar_mensajes(Serial* Arduino)
{

	int bytesrecibidos, total = 0;
	int gol_porteria=0;
	char mensaje_recibido[MAX_BUFFER]="";

	bytesrecibidos = Arduino->ReadData(mensaje_recibido, sizeof(mensaje_recibido) - 1);
	if (bytesrecibidos > 0) 

	gol_porteria = detecta_gol(mensaje_recibido);

	while (bytesrecibidos>0)
	{
		Sleep(PAUSA_MS);
		total += bytesrecibidos;
		bytesrecibidos = Arduino->ReadData(mensaje_recibido, sizeof(mensaje_recibido) - 1);
	}

	 if (total > 0)
	{
		mensaje_recibido[total - 1] = '\0';
	}
}

void bloquea_ultrasonidos(Serial* Arduino)
{
	int bytesenviados;
	char bloqueo = '#';
	bytesenviados = Arduino->WriteData(&bloqueo, sizeof(char));
}

void activa_ultrasonidos(Serial* Arduino)
{
	int bytesenviados;
	char activa = '@';
	bytesenviados = Arduino->WriteData(&activa, sizeof(char));
}

int detecta_gol(char cadena_arduino[])
{
	int n=0;

	// Gol portería A
	if (cadena_arduino[0] == 'A')
	{
		n = 1;
	}

	// Gol portería B
	if (cadena_arduino[0] == 'B')
	{
		n = 2;
	}

	printf("Gol porteria: %d\n", n);
	return n;
}
void jugar_partida()
{
int opcion;
int menu2;
int flag = 0;
int contador1=0, contador2=0;
int goles;
int ganador = 0;

	printf("----------MENU PRINCIPAL----------\n");
	printf("--> Introduzca una opción: \n");
	printf("1. NUEVA PARTIDA\n");
	printf("2. MOSTRAR DATOS DE PARTIDA\n");
	printf("3. SALIR");

	do
	{
		printf("\nIntroduzca la opción deseada: \n");

		scanf_s("%d", &opcion);
		switch (opcion)
		{
		case 1:
			do
			{
				//menu de partidas
				printf("-----MENU DE PARTIDAS-----\n");
				printf("Seleccione el modo de juego: \n");
				printf("1. Al mejor de 3\n");
				printf("2. Al mejor de 5\n");
				printf("3. Muerte subita\n");
				printf("4. Terminar partida\n");

				if (flag == 1)
				{
					flag = 0;
					break;
				}

				printf("\nIntroduzca una opcion: \n");
				scanf_s("%d", &menu2);

				switch (menu2)
				{
					case 1:
					{
						//Funcion al mejor de 3
						printf("\n\n AL MEJOR DE 3\n\n");
						do
						{
							goles = comprobar_mensajes(Arduino);
							switch (goles)
							{
							case 1:	// Gol Portería A
								{
									contador1++;
									printf("\n Valor de Contador1: %d", contador1);
									break;
								}
							case 2: // Gol Portería B
								{
									contador2++;
									printf("\n Valor de Contador2: %d", contador2);
									break;
								}
							default:
								break;
							}

						} while (contador1 <= 3 && contador2 <= 3);
						
						if (contador1 > contador2)
						{
							printf("\nEl ganador es el Jugador 1\n");
						}
						else
						{
							printf("\nEl ganador es el Jugador 2\n");
						}
						break;
					}
					case 2:
					{
						//Funcion al mejor de 5
						printf("\n\n AL MEJOR DE 5\n\n");
						do
						{
							goles = comprobar_mensajes(Arduino);
							switch (goles)
							{
							case 1:	// Gol Portería A
								{
									contador1++;
									break;
								}
							case 2: // Gol Portería B
								{
									contador2++;
									break;
								}
							default:
								break;
							}

						} while (contador1 < 5 && contador2 < 5);
						if (contador1 > contador2) printf("\nEl ganador es el Jugador 1\n");
							else printf("\nEl ganador es el Jugador 2\n");
						break;
					}
					case 3:
					{
						do
						{
							//Muerte súbita
							printf("\n\n MUERTE SUBITA\n\n");
							goles = comprobar_mensajes(Arduino);
							switch (goles)
							{
							case 1:	// Gol Portería A
							{
								contador1++;
								break;
							}

							case 2: // Gol Portería B
							{
								contador2++;
								break;
							}
							default:
								break;
							}

						} while (contador1 >= 1 || contador2 >= 1);
						if (contador1 > contador2) printf("\nEl ganador es el Jugador 1\n");
							else printf("\nEl ganador es el Jugador 2\n");
						break;
					}
					case 4:
						{
							printf("Su partida ha finalizado");
							flag = 1;
							//Mostrar puntuación
							break;
						}
					default:
						printf("\nIntroduzca una opción válida\n");
				}
			} while (menu2 == 1 || menu2 == 2 || menu2 == 3 || menu2 == 4);
				break;
		case 2:
		{
			//LeerFichero(v_jugador, n_jugadores);
			// funcion que lea el fichero
		}
		break;
		case 3:
			break;
		default:
			printf("Esa opción no esta en el menu\n");
			break;
		}
	} while (opcion != 3);
}

// ----------------------------

void CargarJugador(jugador* jugadores, int n_jugador) 
{
	int i;
	printf("Se va a proceder a la carga de la estructura de jugador: \n");
	for (i = 0; i < n_jugador; i++) {
		RellenarEstructura(&jugadores[i]);
	}
	return;
}
void RellenarEstructura(jugador* j) 
{
	printf("\nIntroduzca el nombre del jugador: ");
	getchar();
	//fgets(j->nombre, N, stdin);
	gets_s(j->nombre);
	printf("\nIntroduzca el apellido del jugador: ");
	//fgets(j->apellido, N, stdin);
	gets_s(j->apellido);
	printf("\nIntroduzca la edad del jugador: ");
	scanf_s("%d", &(j->edad));
	return;
}
void EscribirFichero(jugador* jugador, int n_jugadores) 
{
	FILE* pf_jugador;
	int i, valor;
	errno_t e;
	e = fopen_s(&pf_jugador, "jugadores.txt", "w+");
	if (pf_jugador == NULL) {
		printf("Error al abrir el fichero");
	}
	else {
		rewind(pf_jugador);
		for (i = 0;i < n_jugadores;i++) {
			//printf("\nNombre: %s, \nApellido: %s, \nEdad: %d años", (jugador[i].nombre), (jugador[i].apellido), (jugador[i].edad));
			fprintf(pf_jugador, "%s\n%s\n%d\n", (jugador[i].nombre), (jugador[i].apellido), (jugador[i].edad));
		}
		fclose(pf_jugador);
	}
	return;
}
void LeerFichero(jugador* jugador, int n_jugadores) 
{
	FILE* pf_jugador;
	int i=0;
	char nombre[N];
	char apellido[N];
	errno_t e;
	e = fopen_s(&pf_jugador, "jugadores.txt", "r");
	if (pf_jugador == NULL) {
		printf("Error al abrir el fichero");
	}
	else {
		for (i = 0;i < n_jugadores;i++) {
			fscanf_s(pf_jugador, "%s\n", &jugador[i].nombre, sizeof(jugador[i].nombre));
			fscanf_s(pf_jugador, "%s\n", &jugador[i].apellido, sizeof(jugador[i].apellido));
			fscanf_s(pf_jugador, "%d\n", &jugador[i].edad);
			//strcpy_s(nombre, (jugador[i].nombre));
			//strcpy_s(apellido, (jugador[i].apellido));
			printf("\nNombre: %s, Apellido: %s, Edad: %d años\n", jugador[i].nombre, jugador[i].apellido, (jugador[i].edad));
		}
		fclose(pf_jugador);
	}
	return;
}
